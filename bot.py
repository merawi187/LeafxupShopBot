import os
import telebot
from telebot import types
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN')
MANAGER_CHAT_ID = int(os.getenv('MANAGER_CHAT_ID', '0'))

bot = telebot.TeleBot(BOT_TOKEN)

PLATFORMS = [
    ("genshin_price", "üíé Genshin Impact (–ø—Ä–∞–π—Å)"),
    ("genshin_locations", "üíé Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π)"),
    ("steam", "üëÅ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam"),
    ("hsr_price", "üåü Honkai: Star Rail (–ø—Ä–∞–π—Å)"),
    ("zzz_price", "üíé Zenless Zone Zero (–ø—Ä–∞–π—Å)"),
    ("roblox_price", "üíé Roblox (–ø—Ä–∞–π—Å)"),
    ("clash_price", "üíé Clash Of Clans (–ø—Ä–∞–π—Å)"),
    ("brawl_price", "üíé Brawl Stars (–ø—Ä–∞–π—Å)")
]

user_states = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
def get_platforms_keyboard():
    kb = types.InlineKeyboardMarkup()
    for callback, name in PLATFORMS:
        kb.add(types.InlineKeyboardButton(text=name, callback_data=callback))
    return kb

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_states.pop(message.from_user.id, None)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É—Å–ª—É–≥–∏:", reply_markup=get_platforms_keyboard())

@bot.callback_query_handler(func=lambda call: call.data in [p[0] for p in PLATFORMS])
def platform_callback_handler(call):
    if call.data == "steam":
        user_states[call.from_user.id] = {"state": "awaiting_steam_login"}
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω Steam:")
    else:
        user_states[call.from_user.id] = {"state": f"confirm_{call.data}"}
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{call.data}"))
        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {dict(PLATFORMS)[call.data]}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑?", reply_markup=kb)
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_steam_login")
def steam_login_handler(message):
    login = message.text.strip()
    user_states[message.from_user.id] = {"state": "awaiting_steam_amount", "login": login}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_steam_amount")
def steam_amount_handler(message):
    try:
        amount = float(message.text.strip().replace(',', '.'))
        commission = round(amount * 0.08, 2)
        total = round(amount + commission, 2)
        login = user_states[message.from_user.id]["login"]
        user_states[message.from_user.id] = {
            "state": "confirm_steam",
            "login": login,
            "amount": amount,
            "commission": commission,
            "total": total
        }
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_steam"))
        bot.send_message(message.chat.id, f"–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è (8%): {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?", reply_markup=kb)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_callback_handler(call):
    platform = call.data.replace("confirm_", "")
    username = call.from_user.username or '–ë–µ–∑ username'
    if platform == "steam":
        data = user_states.get(call.from_user.id, {})
        login = data.get("login")
        amount = data.get("amount")
        commission = data.get("commission")
        total = data.get("total")
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\nSteam\n–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è: {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({call.from_user.id})"
    else:
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {dict(PLATFORMS)[platform]}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({call.from_user.id})"
    bot.send_message(MANAGER_CHAT_ID, text)
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
    user_states.pop(call.from_user.id, None)
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: True)
def fallback_handler(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –º–µ–Ω—é /start.")

if __name__ == "__main__":
    bot.polling(none_stop=True) 
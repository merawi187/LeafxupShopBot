import os
import telebot
from telebot import types
from dotenv import load_dotenv
import threading
from flask import Flask

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN')
MANAGER_CHAT_ID = int(os.getenv('MANAGER_CHAT_ID', '0'))

bot = telebot.TeleBot(BOT_TOKEN)

# –¢–æ–≤–∞—Ä—ã Genshin Impact
GENSHIN_ITEMS = [
    ("–ì–∏–º–Ω", 700),
    ("–•–æ—Ä", 1410),
    ("–•65", 70),
    ("–•300", 310),
    ("–•980", 980),
    ("–•1980", 1850),
    ("–•3280", 2900),
    ("–•6480", 5800),
    ("–ö–∞—Ä—Ç–æ—á–∫–∞", 310)
]

PLATFORMS = [
    ("genshin_price", "üíé Genshin Impact (–ø—Ä–∞–π—Å)"),
    ("genshin_locations", "üíé Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π)"),
    ("steam", "üëÅ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam"),
    ("hsr_price", "üåü Honkai: Star Rail (–ø—Ä–∞–π—Å)"),
    ("zzz_price", "üíé Zenless Zone Zero (–ø—Ä–∞–π—Å)"),
    ("roblox_price", "üíé Roblox (–ø—Ä–∞–π—Å)"),
    ("clash_price", "üíé Clash Of Clans (–ø—Ä–∞–π—Å)"),
    ("brawl_price", "üíé Brawl Stars (–ø—Ä–∞–π—Å)")
]

user_states = {}

PLATFORM_PHOTOS = {
    "genshin_price": ("genshin_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Genshin Impact"),
    "genshin_locations": ("genshin_locations.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π)"),
    "steam": ("steam.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Steam"),
    "hsr_price": ("honkai_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Honkai: Star Rail"),
    "zzz_price": ("zzz_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Zenless Zone Zero"),
    "roblox_price": ("roblox_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Roblox"),
    "clash_price": ("coc_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Clash Of Clans"),
    "brawl_price": ("bs_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Brawl Stars"),
}

def get_platforms_keyboard():
    kb = types.InlineKeyboardMarkup()
    for callback, name in PLATFORMS:
        kb.add(types.InlineKeyboardButton(text=name, callback_data=callback))
    return kb

def get_genshin_keyboard():
    kb = types.InlineKeyboardMarkup()
    for item, price in GENSHIN_ITEMS:
        kb.add(types.InlineKeyboardButton(text=f"{item} ({price}‚ÇΩ)", callback_data=f"genshin_{item}"))
    kb.add(types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="genshin_price_photo"))
    return kb

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_states.pop(message.from_user.id, None)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É—Å–ª—É–≥–∏:", reply_markup=get_platforms_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "genshin_price")
def genshin_price_handler(call):
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä Genshin Impact:", reply_markup=get_genshin_keyboard())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.endswith("_price_photo") or call.data in PLATFORM_PHOTOS)
def send_platform_photo(call):
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∞–π—Å–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
    key = call.data.replace("_photo", "")
    photo_info = PLATFORM_PHOTOS.get(key)
    if photo_info:
        filename, caption = photo_info
        try:
            with open(filename, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo, caption=caption)
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∞–π—Å–∞ –¥–ª—è {caption}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    else:
        bot.send_message(call.message.chat.id, "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ!")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data in PLATFORM_PHOTOS)
def platform_callback_handler_with_photo(call):
    photo_info = PLATFORM_PHOTOS.get(call.data)
    if photo_info:
        filename, caption = photo_info
        try:
            with open(filename, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo, caption=caption)
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∞–π—Å–∞ –¥–ª—è {caption}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    # Genshin Impact: —Ñ–æ—Ç–æ + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    if call.data == "genshin_price":
        kb = types.InlineKeyboardMarkup()
        for item, price in GENSHIN_ITEMS:
            kb.add(types.InlineKeyboardButton(text=f"{item} ({price}‚ÇΩ)", callback_data=f"genshin_{item}"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä Genshin Impact:", reply_markup=kb)
    # Genshin Locations: —Ñ–æ—Ç–æ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    elif call.data == "genshin_locations":
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_genshin_locations"))
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏: Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=kb)
    # Steam: —Ñ–æ—Ç–æ + –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞
    elif call.data == "steam":
        user_states[call.from_user.id] = {"state": "awaiting_steam_login"}
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω Steam:")
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ: —Ñ–æ—Ç–æ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    elif call.data in ["hsr_price", "zzz_price", "roblox_price", "clash_price", "brawl_price"]:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"confirm_{call.data}"))
        platform_name = dict(PLATFORMS)[call.data]
        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {platform_name}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=kb)
    bot.answer_callback_query(call.id)

# Genshin Impact: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("genshin_"))
def genshin_item_handler(call):
    item = call.data.replace("genshin_", "")
    for name, price in GENSHIN_ITEMS:
        if item == name:
            bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {name} ({price}‚ÇΩ). –î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.")
            break
    bot.answer_callback_query(call.id)

# Steam: –ª–æ–≥–∏–Ω -> —Å—É–º–º–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_steam_login")
def steam_login_handler(message):
    login = message.text.strip()
    user_states[message.from_user.id] = {"state": "awaiting_steam_amount", "login": login}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 100 –¥–æ 25000):")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_steam_amount")
def steam_amount_handler(message):
    try:
        amount = float(message.text.strip().replace(',', '.'))
        if amount < 100 or amount > 25000:
            bot.send_message(message.chat.id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100 –¥–æ 25000 —Ä—É–±–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        commission = round(amount * 0.08, 2)
        total = round(amount + commission, 2)
        login = user_states[message.from_user.id]["login"]
        user_states[message.from_user.id] = {
            "state": "confirm_steam",
            "login": login,
            "amount": amount,
            "commission": commission,
            "total": total
        }
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_steam"))
        bot.send_message(message.chat.id, f"–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è (8%): {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?", reply_markup=kb)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_callback_handler(call):
    platform = call.data.replace("confirm_", "")
    username = call.from_user.username or '–ë–µ–∑ username'
    if platform == "steam":
        data = user_states.get(call.from_user.id, {})
        login = data.get("login")
        amount = data.get("amount")
        commission = data.get("commission")
        total = data.get("total")
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\nSteam\n–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è: {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({call.from_user.id})"
    else:
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {dict(PLATFORMS)[platform]}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({call.from_user.id})"
    bot.send_message(MANAGER_CHAT_ID, text)
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
    user_states.pop(call.from_user.id, None)
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: True)
def fallback_handler(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –º–µ–Ω—é /start.")

# Flask-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render

def run_flask():
    app = Flask(__name__)

    @app.route('/')
    def index():
        return "OK"

    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    bot.polling(none_stop=True) 
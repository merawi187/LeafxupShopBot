import os
import telebot
from telebot import types
from dotenv import load_dotenv
import threading
from flask import Flask

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN')
MANAGER_CHAT_ID = int(os.getenv('MANAGER_CHAT_ID', '0'))

bot = telebot.TeleBot(BOT_TOKEN)

# –¢–æ–≤–∞—Ä—ã Genshin Impact
GENSHIN_ITEMS = [
    ("–ì–∏–º–Ω", 700),
    ("–•–æ—Ä", 1410),
    ("–•65", 70),
    ("–•300", 310),
    ("–•980", 980),
    ("–•1980", 1850),
    ("–•3280", 2900),
    ("–•6480", 5800),
    ("–ö–∞—Ä—Ç–æ—á–∫–∞", 310)
]

PLATFORMS = [
    ("genshin_price", "üíé Genshin Impact (–ø—Ä–∞–π—Å)"),
    ("genshin_locations", "üíé Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π)"),
    ("steam", "üëÅ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam"),
    ("hsr_price", "üåü Honkai: Star Rail (–ø—Ä–∞–π—Å)"),
    ("zzz_price", "üíé Zenless Zone Zero (–ø—Ä–∞–π—Å)"),
    ("roblox_price", "üíé Roblox (–ø—Ä–∞–π—Å)"),
    ("clash_price", "üíé Clash Of Clans (–ø—Ä–∞–π—Å)"),
    ("brawl_price", "üíé Brawl Stars (–ø—Ä–∞–π—Å)")
]

user_states = {}

PLATFORM_PHOTOS = {
    "genshin_price": ("genshin_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Genshin Impact"),
    "genshin_locations": ("genshin_locations.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π)"),
    "steam": ("steam.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Steam"),
    "hsr_price": ("honkai_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Honkai: Star Rail"),
    "zzz_price": ("zzz_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Zenless Zone Zero"),
    "roblox_price": ("roblox_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Roblox"),
    "clash_price": ("coc_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Clash Of Clans"),
    "brawl_price": ("bs_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Brawl Stars"),
}

PLATFORM_TEXTS = {
    "genshin_locations": (
        "üíé –ó–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π –≤ Genshin Impact\n"
        "\nüå™ - –ú–æ–Ω–¥—à—Ç–∞–¥—Ç\n"
        "‚Ä¢  –ú–æ–Ω–¥—à—Ç–∞–¥—Ç (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 850 —Ä—É–±–ª–µ–π.\n"
        "‚Ä¢ –î—Ä–∞–∫–æ–Ω–∏–π —Ö—Ä–µ–±–µ—Ç (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 700\n"
        "‚Ä¢ –ú–æ–Ω–¥—à—Ç–∞–¥—Ç/–î—Ä–∞–∫–æ–Ω–∏–π —Ö—Ä–µ–±–µ—Ç (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 1300\n"
        "\nü™® - –õ–∏ –Æ—ç\n"
        "‚Ä¢ –õ–∏ –Æ—ç (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 2300\n"
        "‚Ä¢ –†–∞–∑–ª–æ–º (100 –∑–∞–∫—Ä—ã—Ç–∏–µ) - 1000 \n"
        "‚Ä¢ –õ–∏ –Æ—ç/–†–∞–∑–ª–æ–º (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 3300\n"
        "‚Ä¢ –î–æ–ª–∏–Ω–∞ –ß—ç–Ω—å—é–π (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 2200\n"
        "\n‚ö°Ô∏è - –ò–Ω–∞–¥–∑—É–º–∞\n"
        "‚Ä¢ –ò–Ω–∞–¥–∑—É–º–∞ (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 2000\n"
        "‚Ä¢ –≠–Ω–∫–∞–Ω–æ–º–∏—è (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 1200\n"
        "‚Ä¢ –ò–Ω–∞–¥–∑—É–º–∞/–≠–Ω–∫–∞–Ω–æ–º–∏—è (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 3200\n"
        "\nüåø - –°—É–º–µ—Ä—É \n"
        "‚Ä¢ –°—É–º–µ—Ä—É (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 2200\n"
        "‚Ä¢ –ü—É—Å—Ç—ã–Ω—è –ö–æ–ª–æ–Ω–Ω–∞–¥ (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 1350 \n"
        "‚Ä¢ –ü—É—Å—Ç—ã–Ω—è –•–∞–¥—Ä–∞–º–∞–≤–µ—Ç (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 1800\n"
        "‚Ä¢ –¶–∞—Ä—Å—Ç–≤–æ –§–∞—Ä–∞–∫—Ö–µ—Ä—Ç (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 1200\n"
        "‚Ä¢ –í—Å–µ –ø—É—Å—Ç—ã–Ω–∏ –°—É–º–µ—Ä—É (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 4350 \n"
        "‚Ä¢ –°—É–º–µ—Ä—É —Ç—Ä–æ–ø–∏–∫–∏ –∏ –ø—É—Å—Ç—ã–Ω—è (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 6500\n"
        "\nü´µ - –§–æ–Ω—Ç–µ–π–Ω \n"
        "‚Ä¢ –ö—É—Ä –î–µ –§–æ–Ω—Ç–µ–π–Ω (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 1800\n"
        "‚Ä¢ –ò–Ω—Å—Ç–∏—Ç—É—Ç –§–æ–Ω—Ç–µ–π–Ω–∞ (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 1700 \n"
        "‚Ä¢ –õ–µ—Å –≠—Ä–∏–Ω–∏–π (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 2100\n"
        "‚Ä¢ –î—Ä–µ–≤–Ω–µ–µ –ú–æ—Ä–µ (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) 1300\n"
        "‚Ä¢ –í–µ—Å—å –§–æ–Ω—Ç–µ–π–Ω (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) 6400\n"
        "\nüóø - –ù–∞—Ç–ª–∞–Ω\n"
        "‚Ä¢ –ù–∞—Ç–ª–∞–Ω 5.0 (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 3000\n"
        "‚Ä¢ –û—á–∫–∞–Ω–∞—Ç–ª–∞–Ω (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 1800\n"
        "‚Ä¢ –ù–∞—Ç–ª–∞–Ω 5.5 (100 % –∑–∞–∫—Ä—ã—Ç–∏–µ) - 2250 \n"
        "\n‚ùï –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏\n"
        "‚Ä¢ –ö–≤–µ—Å—Ç –ê—Ä–∞–Ω–∞—Ä - 1800\n"
        "‚Ä¢ –£—Ö–æ–¥ –∑–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–º ( –º–µ—Å—è—Ü ) - 3000\n"
    ),
    "hsr_price": (
        "–•–æ–Ω–∫–∞–∏ –°—Ç–∞—Ä –†–µ–π–ª\n"
        "–°–ª–∞–≤–∞ –±–µ–∑—ã–º—è–Ω–Ω—ã—Ö - 800\n"
        "–ß–µ—Å—Ç—å –±–µ–∑—ã–º—è–Ω–Ω—ã—Ö - 1600\n"
        "–•300 - 350\n"
        "–•980 - 1380\n"
        "–•1980 - 2150\n"
        "–•3280 - 3510\n"
        "–•6480 - 7050\n"
        "–ö–∞–ª–µ–Ω–¥–∞—Ä—å - 350\n"
    ),
    "zzz_price": (
        "–ó–µ–Ω–ª–µ—Å –ó–æ–Ω–µ –ó–∏—Ä–æ\n"
        "–§–æ–Ω–¥ –†–∏–¥—É –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π - 810\n"
        "–§–æ–Ω–¥ –†–∏–¥—É –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π - 1610\n"
        "–•300 - 355\n"
        "–•980 - 1110\n"
        "–•1980 - 2180\n"
        "–•3280 - 3650\n"
        "–•6480 - 7100\n"
        "–ù–∞–±–æ—Ä - 355\n"
    ),
    "roblox_price": (
        "–†–æ–±–ª–æ–∫—Å\n"
        "–•500 - 470\n"
        "–•1000 - 910\n"
        "–•2000 - 1810\n"
        "–•5250 - 4400\n"
        "–•11000 - 8800\n"
        "–•24000 - 18000\n"
    ),
    "clash_price": (
        "–ö–ª–µ—à –†–æ—è–ª—å\n"
        "–ü–∞—Å—Å —Ä–æ—è–ª—å - 94\n"
        "–•500 - 395\n"
        "–•1200 - 795\n"
        "–•2500 - 1590\n"
        "–•6500 - 3985\n"
        "–•14000 - 7995\n"
        "–•80 - 75\n"
    ),
    "brawl_price": (
        "–ë—Ä–∞–≤–ª –°—Ç–∞—Ä—Å\n"
        "–ë—Ä–∞–≤–ª –ü–∞—Å—Å - 500\n"
        "–£–ª—É—á—à–µ–Ω–∏–µ –¥–æ –ø–ª—é—Å - 315\n"
        "–ë—Ä–∞–≤–ª –ü–∞—Å—Å –ø–ª—é—Å - 770\n"
        "–•30 - 155\n"
        "–•80 - 385\n"
        "–•170 - 780\n"
        "–•360 - 1580\n"
        "–•950 - 3900\n"
        "–•2000 - 7800\n"
    ),
}

# --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º ---
PLATFORM_ITEMS = {
    "genshin_price": [
        ("–ì–∏–º–Ω", 700), ("–•–æ—Ä", 1410), ("–•65", 70), ("–•300", 310), ("–•980", 980), ("–•1980", 1850), ("–•3280", 2900), ("–•6480", 5800), ("–ö–∞—Ä—Ç–æ—á–∫–∞", 310)
    ],
    "genshin_locations": [
        ("–ú–æ–Ω–¥—à—Ç–∞–¥—Ç (100%)", 850), ("–î—Ä–∞–∫–æ–Ω–∏–π —Ö—Ä–µ–±–µ—Ç (100%)", 700), ("–ú–æ–Ω–¥—à—Ç–∞–¥—Ç/–î—Ä–∞–∫–æ–Ω–∏–π —Ö—Ä–µ–±–µ—Ç (100%)", 1300),
        ("–õ–∏ –Æ—ç (100%)", 2300), ("–†–∞–∑–ª–æ–º (100%)", 1000), ("–õ–∏ –Æ—ç/–†–∞–∑–ª–æ–º (100%)", 3300), ("–î–æ–ª–∏–Ω–∞ –ß—ç–Ω—å—é–π (100%)", 2200),
        ("–ò–Ω–∞–¥–∑—É–º–∞ (100%)", 2000), ("–≠–Ω–∫–∞–Ω–æ–º–∏—è (100%)", 1200), ("–ò–Ω–∞–¥–∑—É–º–∞/–≠–Ω–∫–∞–Ω–æ–º–∏—è (100%)", 3200),
        ("–°—É–º–µ—Ä—É (100%)", 2200), ("–ü—É—Å—Ç—ã–Ω—è –ö–æ–ª–æ–Ω–Ω–∞–¥ (100%)", 1350), ("–ü—É—Å—Ç—ã–Ω—è –•–∞–¥—Ä–∞–º–∞–≤–µ—Ç (100%)", 1800), ("–¶–∞—Ä—Å—Ç–≤–æ –§–∞—Ä–∞–∫—Ö–µ—Ä—Ç (100%)", 1200), ("–í—Å–µ –ø—É—Å—Ç—ã–Ω–∏ –°—É–º–µ—Ä—É (100%)", 4350), ("–°—É–º–µ—Ä—É —Ç—Ä–æ–ø–∏–∫–∏ –∏ –ø—É—Å—Ç—ã–Ω—è (100%)", 6500),
        ("–ö—É—Ä –î–µ –§–æ–Ω—Ç–µ–π–Ω (100%)", 1800), ("–ò–Ω—Å—Ç–∏—Ç—É—Ç –§–æ–Ω—Ç–µ–π–Ω–∞ (100%)", 1700), ("–õ–µ—Å –≠—Ä–∏–Ω–∏–π (100%)", 2100), ("–î—Ä–µ–≤–Ω–µ–µ –ú–æ—Ä–µ (100%)", 1300), ("–í–µ—Å—å –§–æ–Ω—Ç–µ–π–Ω (100%)", 6400),
        ("–ù–∞—Ç–ª–∞–Ω 5.0 (100%)", 3000), ("–û—á–∫–∞–Ω–∞—Ç–ª–∞–Ω (100%)", 1800), ("–ù–∞—Ç–ª–∞–Ω 5.5 (100%)", 2250),
        ("–ö–≤–µ—Å—Ç –ê—Ä–∞–Ω–∞—Ä", 1800), ("–£—Ö–æ–¥ –∑–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–º (–º–µ—Å—è—Ü)", 3000)
    ],
    "hsr_price": [
        ("–°–ª–∞–≤–∞ –±–µ–∑—ã–º—è–Ω–Ω—ã—Ö", 800), ("–ß–µ—Å—Ç—å –±–µ–∑—ã–º—è–Ω–Ω—ã—Ö", 1600), ("–•300", 350), ("–•980", 1380), ("–•1980", 2150), ("–•3280", 3510), ("–•6480", 7050), ("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", 350)
    ],
    "zzz_price": [
        ("–§–æ–Ω–¥ –†–∏–¥—É –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", 810), ("–§–æ–Ω–¥ –†–∏–¥—É –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π", 1610), ("–•300", 355), ("–•980", 1110), ("–•1980", 2180), ("–•3280", 3650), ("–•6480", 7100), ("–ù–∞–±–æ—Ä", 355)
    ],
    "roblox_price": [
        ("–•500", 470), ("–•1000", 910), ("–•2000", 1810), ("–•5250", 4400), ("–•11000", 8800), ("–•24000", 18000)
    ],
    "clash_price": [
        ("–ü–∞—Å—Å —Ä–æ—è–ª—å", 94), ("–•500", 395), ("–•1200", 795), ("–•2500", 1590), ("–•6500", 3985), ("–•14000", 7995), ("–•80", 75)
    ],
    "brawl_price": [
        ("–ë—Ä–∞–≤–ª –ü–∞—Å—Å", 500), ("–£–ª—É—á—à–µ–Ω–∏–µ –¥–æ –ø–ª—é—Å", 315), ("–ë—Ä–∞–≤–ª –ü–∞—Å—Å –ø–ª—é—Å", 770), ("–•30", 155), ("–•80", 385), ("–•170", 780), ("–•360", 1580), ("–•950", 3900), ("–•2000", 7800)
    ]
}

def get_platforms_keyboard():
    kb = types.InlineKeyboardMarkup()
    for callback, name in PLATFORMS:
        kb.add(types.InlineKeyboardButton(text=name, callback_data=callback))
    return kb

def get_genshin_keyboard():
    kb = types.InlineKeyboardMarkup()
    for item, price in GENSHIN_ITEMS:
        kb.add(types.InlineKeyboardButton(text=f"{item} ({price}‚ÇΩ)", callback_data=f"genshin_{item}"))
    return kb

def get_items_keyboard(platform):
    kb = types.InlineKeyboardMarkup()
    for name, price in PLATFORM_ITEMS.get(platform, []):
        kb.add(types.InlineKeyboardButton(text=f"{name} ({price}‚ÇΩ)", callback_data=f"item_{platform}_{name}"))
    return kb

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_states.pop(message.from_user.id, None)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É—Å–ª—É–≥–∏:", reply_markup=get_platforms_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "genshin_price")
def genshin_price_handler(call):
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä Genshin Impact:", reply_markup=get_items_keyboard("genshin_price"))
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.endswith("_price_photo") or call.data in PLATFORM_PHOTOS)
def send_platform_photo(call):
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∞–π—Å–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
    key = call.data.replace("_photo", "")
    photo_info = PLATFORM_PHOTOS.get(key)
    if photo_info:
        filename, caption = photo_info
        try:
            with open(filename, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo, caption=caption)
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∞–π—Å–∞ –¥–ª—è {caption}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    else:
        bot.send_message(call.message.chat.id, "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ!")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data in PLATFORM_PHOTOS)
def platform_callback_handler_with_photo(call):
    photo_info = PLATFORM_PHOTOS.get(call.data)
    if photo_info:
        filename, caption = photo_info
        try:
            with open(filename, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo, caption=caption)
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∞–π—Å–∞ –¥–ª—è {caption}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    # Genshin Impact: —Ñ–æ—Ç–æ + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    if call.data == "genshin_price":
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä Genshin Impact:", reply_markup=get_items_keyboard("genshin_price"))
    # Genshin Locations: —Ñ–æ—Ç–æ + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    elif call.data == "genshin_locations":
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é:", reply_markup=get_items_keyboard("genshin_locations"))
    # Steam: —Ñ–æ—Ç–æ + –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞
    elif call.data == "steam":
        user_states[call.from_user.id] = {"state": "awaiting_steam_login"}
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω Steam:")
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ: —Ñ–æ—Ç–æ + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    elif call.data in PLATFORM_ITEMS:
        platform_name = dict(PLATFORMS)[call.data]
        bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é {platform_name}:", reply_markup=get_items_keyboard(call.data))
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º (–∫—Ä–æ–º–µ Steam)
@bot.callback_query_handler(func=lambda call: call.data.startswith("item_"))
def item_selected_handler(call):
    parts = call.data.split("_", 2)
    platform = parts[1]
    name = parts[2]
    price = None
    for n, p in PLATFORM_ITEMS.get(platform, []):
        if n == name:
            price = p
            break
    if price is not None:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"confirm_{platform}_{name}"))
        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {name} ({price}‚ÇΩ). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=kb)
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_item_handler(call):
    parts = call.data.split("_", 2)
    platform = parts[1]
    name = parts[2] if len(parts) > 2 else None
    username = call.from_user.username or '–ë–µ–∑ username'
    if name:
        price = None
        for n, p in PLATFORM_ITEMS.get(platform, []):
            if n == name:
                price = p
                break
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {dict(PLATFORMS).get(platform, platform)}\n–ü–æ–∑–∏—Ü–∏—è: {name} ({price}‚ÇΩ)\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({call.from_user.id})"
    else:
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {dict(PLATFORMS).get(platform, platform)}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({call.from_user.id})"
    bot.send_message(MANAGER_CHAT_ID, text)
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
    bot.answer_callback_query(call.id)

# Steam: –ª–æ–≥–∏–Ω -> —Å—É–º–º–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_steam_login")
def steam_login_handler(message):
    login = message.text.strip()
    user_states[message.from_user.id] = {"state": "awaiting_steam_amount", "login": login}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 100 –¥–æ 25000):")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_steam_amount")
def steam_amount_handler(message):
    try:
        amount = float(message.text.strip().replace(',', '.'))
        if amount < 100 or amount > 25000:
            bot.send_message(message.chat.id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100 –¥–æ 25000 —Ä—É–±–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        commission = round(amount * 0.08, 2)
        total = round(amount + commission, 2)
        login = user_states[message.from_user.id]["login"]
        user_states[message.from_user.id] = {
            "state": "confirm_steam",
            "login": login,
            "amount": amount,
            "commission": commission,
            "total": total
        }
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_steam"))
        bot.send_message(message.chat.id, f"–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è (8%): {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?", reply_markup=kb)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_callback_handler(call):
    platform = call.data.replace("confirm_", "")
    username = call.from_user.username or '–ë–µ–∑ username'
    if platform == "steam":
        data = user_states.get(call.from_user.id, {})
        login = data.get("login")
        amount = data.get("amount")
        commission = data.get("commission")
        total = data.get("total")
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\nSteam\n–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è: {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({call.from_user.id})"
    else:
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {dict(PLATFORMS)[platform]}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({call.from_user.id})"
    bot.send_message(MANAGER_CHAT_ID, text)
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
    user_states.pop(call.from_user.id, None)
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: True)
def fallback_handler(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –º–µ–Ω—é /start.")

# Flask-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render

def run_flask():
    app = Flask(__name__)

    @app.route('/')
    def index():
        return "OK"

    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    bot.polling(none_stop=True) 
import os
import telebot
from telebot import types
from dotenv import load_dotenv
import time
import json
import sqlite3

DB_FILE = 'data.db'

PRICES_FILE = 'prices.json'
USERS_FILE = 'users.json'

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN')
MANAGER_CHAT_ID = int(os.getenv('MANAGER_CHAT_ID', '0'))

bot = telebot.TeleBot(BOT_TOKEN)

# –¢–æ–≤–∞—Ä—ã Genshin Impact
GENSHIN_ITEMS = [
    ("–ì–∏–º–Ω", 700),
    ("–•–æ—Ä", 1410),
    ("–•65", 70),
    ("–•300", 310),
    ("–•980", 980),
    ("–•1980", 1850),
    ("–•3280", 2900),
    ("–•6480", 5800),
    ("–ö–∞—Ä—Ç–æ—á–∫–∞", 310)
]

# –î–æ–±–∞–≤–ª—è—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PLATFORM_ITEMS –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, –∫—Ä–æ–º–µ genshin_locations
PLATFORM_ITEMS = {
    "genshin_price": [
        ("–ì–∏–º–Ω", 700), ("–•–æ—Ä", 1410), ("–•65", 70), ("–•300", 310), ("–•980", 980), ("–•1980", 1850), ("–•3280", 2900), ("–•6480", 5800), ("–ö–∞—Ä—Ç–æ—á–∫–∞", 310)
    ],
    "steam": [],
    "hsr_price": [
        ("–°–ª–∞–≤–∞ –±–µ–∑—ã–º—è–Ω–Ω—ã—Ö", 800), ("–ß–µ—Å—Ç—å –±–µ–∑—ã–º—è–Ω–Ω—ã—Ö", 1600), ("–•300", 350), ("–•980", 1380), ("–•1980", 2150), ("–•3280", 3510), ("–•6480", 7050), ("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", 350)
    ],
    "zzz_price": [
        ("–§–æ–Ω–¥ –†–∏–¥—É –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", 810), ("–§–æ–Ω–¥ –†–∏–¥—É –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π", 1610), ("–•300", 355), ("–•980", 1110), ("–•1980", 2180), ("–•3280", 3650), ("–•6480", 7100), ("–ù–∞–±–æ—Ä", 355)
    ],
    "roblox_price": [
        ("–•500", 470), ("–•1000", 910), ("–•2000", 1810), ("–•5250", 4400), ("–•11000", 8800), ("–•24000", 18000)
    ],
    "clash_price": [
        ("–ü–∞—Å—Å —Ä–æ—è–ª—å", 94), ("–•500", 395), ("–•1200", 795), ("–•2500", 1590), ("–•6500", 3985), ("–•14000", 7995), ("–•80", 75)
    ],
    "brawl_price": [
        ("–ë—Ä–∞–≤–ª –ü–∞—Å—Å", 500), ("–£–ª—É—á—à–µ–Ω–∏–µ –¥–æ –ø–ª—é—Å", 315), ("–ë—Ä–∞–≤–ª –ü–∞—Å—Å –ø–ª—é—Å", 770), ("–•30", 155), ("–•80", 385), ("–•170", 780), ("–•360", 1580), ("–•950", 3900), ("–•2000", 7800)
    ]
}

PLATFORMS = [
    ("genshin_price", "üíé Genshin Impact (–ø—Ä–∞–π—Å)"),
    ("genshin_locations", "üíé Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π)"),
    ("steam", "üëÅ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam"),
    ("hsr_price", "üåü Honkai: Star Rail (–ø—Ä–∞–π—Å)"),
    ("zzz_price", "üíé Zenless Zone Zero (–ø—Ä–∞–π—Å)"),
    ("roblox_price", "üíé Roblox (–ø—Ä–∞–π—Å)"),
    ("clash_price", "üíé Clash Of Clans (–ø—Ä–∞–π—Å)"),
    ("brawl_price", "üíé Brawl Stars (–ø—Ä–∞–π—Å)")
]

user_states = {}
messages_to_delete = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å

PLATFORM_PHOTOS = {
    "genshin_price": ("genshin_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Genshin Impact"),
    "genshin_locations": ("genshin_locations.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π)"),
    "steam": ("steam.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Steam"),
    "hsr_price": ("honkai_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Honkai: Star Rail"),
    "zzz_price": ("zzz_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Zenless Zone Zero"),
    "roblox_price": ("roblox_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Roblox"),
    "clash_price": ("coc_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Clash Of Clans"),
    "brawl_price": ("bs_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Brawl Stars"),
}

# –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ª–æ–∫–∞—Ü–∏–π Genshin Impact
LOCATION_REGIONS = {
    "mondstadt": "üå™ –ú–æ–Ω–¥—à—Ç–∞–¥—Ç",
    "liyue": "ü™® –õ–∏ –Æ—ç",
    "inazuma": "‚ö°Ô∏è –ò–Ω–∞–¥–∑—É–º–∞",
    "sumeru": "üåø –°—É–º–µ—Ä—É",
    "fontaine": "ü´µ –§–æ–Ω—Ç–µ–π–Ω",
    "natlan": "üóø –ù–∞—Ç–ª–∞–Ω",
    "other_services": "‚ùï –î–æ–ø. —É—Å–ª—É–≥–∏"
}

LOCATION_ITEMS = {
    "mondstadt": [
        ("–ú–æ–Ω–¥—à—Ç–∞–¥—Ç (100%)", 850), ("–î—Ä–∞–∫–æ–Ω–∏–π —Ö—Ä–µ–±–µ—Ç (100%)", 700), ("–ú–æ–Ω–¥—à—Ç–∞–¥—Ç/–î—Ä–∞–∫–æ–Ω–∏–π —Ö—Ä–µ–±–µ—Ç (100%)", 1300)
    ],
    "liyue": [
        ("–õ–∏ –Æ—ç (100%)", 2300), ("–†–∞–∑–ª–æ–º (100%)", 1000), ("–õ–∏ –Æ—ç/–†–∞–∑–ª–æ–º (100%)", 3300), ("–î–æ–ª–∏–Ω–∞ –ß—ç–Ω—å—é–π (100%)", 2200)
    ],
    "inazuma": [
        ("–ò–Ω–∞–¥–∑—É–º–∞ (100%)", 2000), ("–≠–Ω–∫–∞–Ω–æ–º–∏—è (100%)", 1200), ("–ò–Ω–∞–¥–∑—É–º–∞/–≠–Ω–∫–∞–Ω–æ–º–∏—è (100%)", 3200)
    ],
    "sumeru": [
        ("–°—É–º–µ—Ä—É (100%)", 2200), ("–ü—É—Å—Ç—ã–Ω—è –ö–æ–ª–æ–Ω–Ω–∞–¥ (100%)", 1350), ("–ü—É—Å—Ç—ã–Ω—è –•–∞–¥—Ä–∞–º–∞–≤–µ—Ç (100%)", 1800), ("–¶–∞—Ä—Å—Ç–≤–æ –§–∞—Ä–∞–∫—Ö–µ—Ä—Ç (100%)", 1200), ("–í—Å–µ –ø—É—Å—Ç—ã–Ω–∏ –°—É–º–µ—Ä—É (100%)", 4350), ("–°—É–º–µ—Ä—É —Ç—Ä–æ–ø–∏–∫–∏ –∏ –ø—É—Å—Ç—ã–Ω—è (100%)", 6500)
    ],
    "fontaine": [
        ("–ö—É—Ä –î–µ –§–æ–Ω—Ç–µ–π–Ω (100%)", 1800), ("–ò–Ω—Å—Ç–∏—Ç—É—Ç –§–æ–Ω—Ç–µ–π–Ω–∞ (100%)", 1700), ("–õ–µ—Å –≠—Ä–∏–Ω–∏–π (100%)", 2100), ("–î—Ä–µ–≤–Ω–µ–µ –ú–æ—Ä–µ (100%)", 1300), ("–í–µ—Å—å –§–æ–Ω—Ç–µ–π–Ω (100%)", 6400)
    ],
    "natlan": [
        ("–ù–∞—Ç–ª–∞–Ω 5.0 (100%)", 3000), ("–û—á–∫–∞–Ω–∞—Ç–ª–∞–Ω (100%)", 1800), ("–ù–∞—Ç–ª–∞–Ω 5.5 (100%)", 2250)
    ],
    "other_services": [
        ("–ö–≤–µ—Å—Ç –ê—Ä–∞–Ω–∞—Ä", 1800), ("–£—Ö–æ–¥ –∑–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–º (–º–µ—Å—è—Ü)", 3000)
    ]
}

# --- –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö callback_data ---
# –î–ª—è Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π)
LOCATION_ITEM_KEYS = {}
for region_code, items in LOCATION_ITEMS.items():
    for idx, (name, price) in enumerate(items):
        key = f"{region_code}_{idx}"
        LOCATION_ITEM_KEYS[key] = (region_code, name, price)

# –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
PLATFORM_ITEM_KEYS = {}
for platform, items in PLATFORM_ITEMS.items():
    for idx, (name, price) in enumerate(items):
        key = f"{platform}_{idx}"
        PLATFORM_ITEM_KEYS[key] = (platform, name, price)

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ ID (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏) ---
ADMIN_IDS = [526427613, 5174082916]

# --- –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ü–µ–Ω (–≤ –ø–∞–º—è—Ç–∏) ---
MODIFIED_PRICES = {}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY)')
    c.execute('''CREATE TABLE IF NOT EXISTS prices (
        key TEXT PRIMARY KEY,
        price INTEGER
    )''')
    conn.commit()
    conn.close()

init_db()

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
def add_user(user_id):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('SELECT user_id FROM users')
    users = [row[0] for row in c.fetchall()]
    conn.close()
    return users

# --- –†–∞–±–æ—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏ ---
# –£–¥–∞–ª—è—é —Ñ—É–Ω–∫—Ü–∏–∏ set_price_db, get_price_db, set_price, get_price, price_change_state –∏ –≤—Å–µ message_handler —Å setprice

# --- –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
broadcast_state = {}

@bot.message_handler(commands=['broadcast'])
def broadcast_start(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    clean_previous_messages(message.chat.id)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    broadcast_state[message.from_user.id] = True

@bot.message_handler(func=lambda m: broadcast_state.get(m.from_user.id))
def broadcast_send(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        broadcast_state.pop(message.from_user.id, None)
        return
    text = message.text
    count = 0
    for user_id in get_all_users():
        try:
            bot.send_message(user_id, text)
            count += 1
        except Exception as e:
            pass
    bot.send_message(message.chat.id, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}")
    broadcast_state.pop(message.from_user.id, None)

# --- –°–±–æ—Ä user_id –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
# –£–¥–∞–ª—ë–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ catch-all callback_query_handler –∏ —Ñ—É–Ω–∫—Ü–∏—è collect_user_callback

def clean_previous_messages(chat_id):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ"""
    if chat_id in messages_to_delete:
        for msg_id in messages_to_delete[chat_id]:
            try:
                bot.delete_message(chat_id, msg_id)
            except Exception as e:
                pass
        messages_to_delete[chat_id] = []

def add_message_to_delete(chat_id, message_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if chat_id not in messages_to_delete:
        messages_to_delete[chat_id] = []
    messages_to_delete[chat_id].append(message_id)

def get_platforms_keyboard():
    kb = types.InlineKeyboardMarkup()
    for callback, name in PLATFORMS:
        kb.add(types.InlineKeyboardButton(text=name, callback_data=callback))
    return kb

def get_items_keyboard(platform):
    kb = types.InlineKeyboardMarkup()
    items = PLATFORM_ITEMS.get(platform, [])
    if not items:
        kb.add(types.InlineKeyboardButton(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", callback_data="none"))
        kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_platforms"))
        return kb
    for idx, (name, price) in enumerate(items):
        key = f"{platform}_{idx}"
        callback_data = f"item|||{key}"
        kb.add(types.InlineKeyboardButton(text=f"{name} ({price}‚ÇΩ)", callback_data=callback_data))
    kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_platforms"))
    return kb

def get_locations_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    kb = types.InlineKeyboardMarkup(row_width=2)
    for region_code, region_name in LOCATION_REGIONS.items():
        kb.add(types.InlineKeyboardButton(
            text=region_name,
            callback_data=f"genshin_loc|||{region_code}"
        ))
    # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_platforms"))
    return kb

def get_location_items_keyboard(region_code):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
    kb = types.InlineKeyboardMarkup()
    items = LOCATION_ITEMS.get(region_code, [])
    for idx, (name, price) in enumerate(items):
        key = f"{region_code}_{idx}"
        kb.add(types.InlineKeyboardButton(
            text=f"{name} - {price}‚ÇΩ",
            callback_data=f"item|||{key}"
        ))
    kb.add(types.InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏–æ–Ω–∞–º",
        callback_data="genshin_locations"
    ))
    kb.add(types.InlineKeyboardButton(
        text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="back_to_platforms"
    ))
    return kb

@bot.message_handler(commands=['start'])
def start_handler(message):
    clean_previous_messages(message.chat.id)
    add_user(message.from_user.id)
    user_states.pop(message.from_user.id, None)
    msg = bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É—Å–ª—É–≥–∏:",
        reply_markup=get_platforms_keyboard()
    )
    add_message_to_delete(message.chat.id, msg.message_id)

def is_admin(user_id):
    return user_id in ADMIN_IDS

@bot.message_handler(commands=['users'])
def show_users(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    users = get_all_users()
    if not users:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (user_id):\n' + '\n'.join(str(u) for u in users)
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['adduser'])
def add_user_cmd(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        user_id = int(message.text.split()[1])
        add_user(user_id)
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /adduser <user_id>")

@bot.message_handler(commands=['deluser'])
def del_user_cmd(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        user_id = int(message.text.split()[1])
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        c.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")
    except Exception:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deluser <user_id>")

# –ò—Å–ø—Ä–∞–≤–ª—è—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Ñ–æ—Ç–æ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.callback_query_handler(func=lambda call: call.data in PLATFORM_PHOTOS)
def platform_handler(call):
    add_user(call.from_user.id)
    clean_previous_messages(call.message.chat.id)
    platform = call.data
    photo_info = PLATFORM_PHOTOS.get(platform)
    if platform == "steam":
        user_states[call.from_user.id] = {"state": "awaiting_steam_login"}
        msg = bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω Steam:")
        add_message_to_delete(call.message.chat.id, msg.message_id)
    elif photo_info:
        filename, caption = photo_info
        try:
            with open(filename, "rb") as photo:
                # –î–ª—è genshin_locations ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî get_items_keyboard
                if platform == "genshin_locations":
                    reply_markup = get_locations_keyboard()
                else:
                    reply_markup = get_items_keyboard(platform)
                msg = bot.send_photo(call.message.chat.id, photo, caption=caption, reply_markup=reply_markup)
                add_message_to_delete(call.message.chat.id, msg.message_id)
        except Exception as e:
            error_msg = bot.send_message(call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∞–π—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É. ({e})")
            add_message_to_delete(call.message.chat.id, error_msg.message_id)
    else:
        msg = bot.send_message(
            call.message.chat.id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é {dict(PLATFORMS)[platform]}:",
            reply_markup=get_items_keyboard(platform)
        )
        add_message_to_delete(call.message.chat.id, msg.message_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("genshin_loc|||"))
def genshin_location_handler(call):
    add_user(call.from_user.id)
    clean_previous_messages(call.message.chat.id)
    region_code = call.data.split("|||")[1]
    print(f"[DEBUG] –í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω: {region_code}")
    if region_code in LOCATION_REGIONS:
        region_name = LOCATION_REGIONS[region_code]
        msg = bot.send_message(
            call.message.chat.id,
            f"üíé {region_name} - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:",
            reply_markup=get_location_items_keyboard(region_code)
        )
        add_message_to_delete(call.message.chat.id, msg.message_id)
    else:
        print(f"[DEBUG] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω: {region_code}")
        bot.answer_callback_query(call.id, "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.callback_query_handler(func=lambda call: call.data == "genshin_locations")
def back_to_locations_handler(call):
    add_user(call.from_user.id)
    clean_previous_messages(call.message.chat.id)
    msg = bot.send_message(
        call.message.chat.id,
        "üíé –ó–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π –≤ Genshin Impact\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
        reply_markup=get_locations_keyboard()
    )
    add_message_to_delete(call.message.chat.id, msg.message_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_platforms")
def back_to_platforms_handler(call):
    add_user(call.from_user.id)
    clean_previous_messages(call.message.chat.id)
    msg = bot.send_message(
        call.message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É—Å–ª—É–≥–∏:",
        reply_markup=get_platforms_keyboard()
    )
    add_message_to_delete(call.message.chat.id, msg.message_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("item|||"))
def item_selected_handler(call):
    add_user(call.from_user.id)
    clean_previous_messages(call.message.chat.id)
    key = call.data.split("|||")[1]
    if key in LOCATION_ITEM_KEYS:
        region_code, name, _ = LOCATION_ITEM_KEYS[key]
        platform = "genshin_locations"
        try:
            idx = int(key.split('_')[1])
            items = LOCATION_ITEMS[region_code]
            if idx < 0 or idx >= len(items):
                raise IndexError
        except (IndexError, ValueError, KeyError):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–∏")
            return
        price = items[idx][1] # –í–æ–∑–≤—Ä–∞—â–∞—é —Ü–µ–Ω—É –Ω–∞–ø—Ä—è–º—É—é
    elif key in PLATFORM_ITEM_KEYS:
        platform, name, _ = PLATFORM_ITEM_KEYS[key]
        try:
            idx = int(key.split('_')[1])
            items = PLATFORM_ITEMS[platform]
            if idx < 0 or idx >= len(items):
                raise IndexError
        except (IndexError, ValueError, KeyError):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–∏")
            return
        price = items[idx][1] # –í–æ–∑–≤—Ä–∞—â–∞—é —Ü–µ–Ω—É –Ω–∞–ø—Ä—è–º—É—é
    else:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑",
        callback_data=f"confirm|||{key}"
    ))
    if platform == "genshin_locations":
        kb.add(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"genshin_loc|||{region_code}"
        ))
        kb.add(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="back_to_platforms"
        ))
    else:
        kb.add(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=platform
        ))
    msg = bot.send_message(
        call.message.chat.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {name} ({price}‚ÇΩ)\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=kb
    )
    add_message_to_delete(call.message.chat.id, msg.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm|||"))
def confirm_order_handler(call):
    add_user(call.from_user.id)
    clean_previous_messages(call.message.chat.id)
    key = call.data.split("|||")[1]
    if key in LOCATION_ITEM_KEYS:
        region_code, name, _ = LOCATION_ITEM_KEYS[key]
        platform = "genshin_locations"
        try:
            idx = int(key.split('_')[1])
            items = LOCATION_ITEMS[region_code]
            if idx < 0 or idx >= len(items):
                raise IndexError
        except (IndexError, ValueError, KeyError):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–∏")
            return
        price = items[idx][1] # –í–æ–∑–≤—Ä–∞—â–∞—é —Ü–µ–Ω—É –Ω–∞–ø—Ä—è–º—É—é
    elif key in PLATFORM_ITEM_KEYS:
        platform, name, _ = PLATFORM_ITEM_KEYS[key]
        try:
            idx = int(key.split('_')[1])
            items = PLATFORM_ITEMS[platform]
            if idx < 0 or idx >= len(items):
                raise IndexError
        except (IndexError, ValueError, KeyError):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–∏")
            return
        price = items[idx][1] # –í–æ–∑–≤—Ä–∞—â–∞—é —Ü–µ–Ω—É –Ω–∞–ø—Ä—è–º—É—é
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        return
    username = call.from_user.username or '–ë–µ–∑ username'
    platform_name = dict(PLATFORMS).get(platform, platform)
    text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform_name}\n–ü–æ–∑–∏—Ü–∏—è: {name} ({price}‚ÇΩ)\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({call.from_user.id})"
    bot.send_message(MANAGER_CHAT_ID, text)
    msg = bot.send_message(
        call.message.chat.id,
        f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n{name} ({price}‚ÇΩ)\n\n–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã."
    )
    add_message_to_delete(call.message.chat.id, msg.message_id)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Steam (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@bot.callback_query_handler(func=lambda call: call.data == "steam")
def back_to_steam_handler(call):
    add_user(call.from_user.id)
    try:
        user_states.pop(call.from_user.id, None)
        clean_previous_messages(call.message.chat.id)
        platform_handler(call)
    except Exception as e:
        print(f"Error in back_to_steam_handler: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_steam_login")
def steam_login_handler(message):
    clean_previous_messages(message.chat.id)
    login = message.text.strip()
    user_states[message.from_user.id] = {"state": "awaiting_steam_amount", "login": login}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 100 –¥–æ 25000):")
    add_message_to_delete(message.chat.id, msg.message_id)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_steam_amount")
def steam_amount_handler(message):
    clean_previous_messages(message.chat.id)
    try:
        amount = float(message.text.strip().replace(',', '.'))
        if amount < 100 or amount > 25000:
            msg = bot.send_message(message.chat.id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100 –¥–æ 25000 —Ä—É–±–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            add_message_to_delete(message.chat.id, msg.message_id)
            return
        
        commission = round(amount * 0.08, 2)
        total = round(amount + commission, 2)
        login = user_states[message.from_user.id]["login"]
        
        user_states[message.from_user.id] = {
            "state": "confirm_steam",
            "login": login,
            "amount": amount,
            "commission": commission,
            "total": total
        }
        
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_steam"))
        kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="steam"))
        
        msg = bot.send_message(
            message.chat.id,
            f"–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è (8%): {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?",
            reply_markup=kb
        )
        add_message_to_delete(message.chat.id, msg.message_id)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö.")
        add_message_to_delete(message.chat.id, msg.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "confirm_steam")
def confirm_steam_handler(call):
    add_user(call.from_user.id)
    clean_previous_messages(call.message.chat.id)
    try:
        data = user_states.get(call.from_user.id, {})
        login = data.get("login")
        amount = data.get("amount")
        commission = data.get("commission")
        total = data.get("total")
        username = call.from_user.username or '–ë–µ–∑ username'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\nSteam\n–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è: {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({call.from_user.id})"
        bot.send_message(MANAGER_CHAT_ID, text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        msg = bot.send_message(
            call.message.chat.id,
            f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞: {amount}‚ÇΩ\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã."
        )
        add_message_to_delete(call.message.chat.id, msg.message_id)
        
        user_states.pop(call.from_user.id, None)
    except Exception as e:
        print(f"Error in confirm_steam_handler: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω ---
# –£–¥–∞–ª—è—é —Ñ—É–Ω–∫—Ü–∏–∏ save_prices, load_prices –∏ –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–∏–º

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
# –£–¥–∞–ª—è—é —Ñ—É–Ω–∫—Ü–∏–∏ save_users, load_users –∏ –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–∏–º

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
# –£–¥–∞–ª—è—é —Ñ—É–Ω–∫—Ü–∏–∏ load_prices, load_users –∏ –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–∏–º

if __name__ == '__main__':
    bot.polling(none_stop=True)

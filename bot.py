import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import os

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN')
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID —á–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
MANAGER_CHAT_ID = int(os.getenv('MANAGER_CHAT_ID', '0'))

# –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º
PLATFORMS = [
    ("genshin_price", "üíé Genshin Impact (–ø—Ä–∞–π—Å)"),
    ("genshin_locations", "üíé Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π)"),
    ("steam", "üëÅ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam"),
    ("hsr_price", "üåü Honkai: Star Rail (–ø—Ä–∞–π—Å)"),
    ("zzz_price", "üíé Zenless Zone Zero (–ø—Ä–∞–π—Å)"),
    ("roblox_price", "üíé Roblox (–ø—Ä–∞–π—Å)"),
    ("clash_price", "üíé Clash Of Clans (–ø—Ä–∞–π—Å)"),
    ("brawl_price", "üíé Brawl Stars (–ø—Ä–∞–π—Å)")
]

def get_platforms_keyboard():
    kb = InlineKeyboardMarkup()
    for callback, name in PLATFORMS:
        kb.add(InlineKeyboardButton(text=name, callback_data=callback))
    return kb

async def start_handler(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É—Å–ª—É–≥–∏:",
        reply_markup=get_platforms_keyboard()
    )

async def platform_callback_handler(callback: CallbackQuery):
    if callback.data == "steam":
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω Steam:")
        await callback.answer()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–≤–æ–¥–∞
        await callback.message.bot.session.storage.set_data(callback.from_user.id, {"state": "awaiting_steam_login"})
    else:
        await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {dict(PLATFORMS)[callback.data]}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑?", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{callback.data}")))
        await callback.answer()

async def text_handler(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await message.bot.session.storage.get_data(message.from_user.id)
    if data and data.get("state") == "awaiting_steam_login":
        login = message.text.strip()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:")
        await message.bot.session.storage.set_data(message.from_user.id, {"state": "awaiting_steam_amount", "login": login})
    elif data and data.get("state") == "awaiting_steam_amount":
        try:
            amount = float(message.text.strip().replace(',', '.'))
            commission = round(amount * 0.08, 2)
            total = round(amount + commission, 2)
            login = data.get("login")
            await message.answer(f"–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è (8%): {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_steam")))
            await message.bot.session.storage.set_data(message.from_user.id, {"state": "confirm_steam", "login": login, "amount": amount, "commission": commission, "total": total})
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –º–µ–Ω—é /start.")

async def confirm_callback_handler(callback: CallbackQuery):
    if callback.data.startswith("confirm_"):
        platform = callback.data.replace("confirm_", "")
        if platform == "steam":
            data = await callback.message.bot.session.storage.get_data(callback.from_user.id)
            login = data.get("login")
            amount = data.get("amount")
            commission = data.get("commission")
            total = data.get("total")
            text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\nSteam\n–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è: {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '–ë–µ–∑ username'} ({callback.from_user.id})"
        else:
            text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {dict(PLATFORMS)[platform]}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '–ë–µ–∑ username'} ({callback.from_user.id})"
        await callback.message.bot.send_message(MANAGER_CHAT_ID, text)
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        await callback.answer()
        await callback.message.bot.session.storage.set_data(callback.from_user.id, {})

async def main():
    bot = Bot(BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher()

    # –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    class SimpleStorage:
        def __init__(self):
            self.data = {}
        async def set_data(self, user_id, value):
            self.data[user_id] = value
        async def get_data(self, user_id):
            return self.data.get(user_id, {})
    bot.session = types.SimpleNamespace(storage=SimpleStorage())

    dp.message.register(start_handler, Command("start"))
    dp.callback_query.register(platform_callback_handler, lambda c: c.data in [p[0] for p in PLATFORMS])
    dp.callback_query.register(confirm_callback_handler, lambda c: c.data.startswith("confirm_"))
    dp.message.register(text_handler)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 
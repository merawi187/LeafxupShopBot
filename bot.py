import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN')
MANAGER_CHAT_ID = int(os.getenv('MANAGER_CHAT_ID', '0'))

PLATFORMS = [
    ("genshin_price", "üíé Genshin Impact (–ø—Ä–∞–π—Å)"),
    ("genshin_locations", "üíé Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π)"),
    ("steam", "üëÅ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam"),
    ("hsr_price", "üåü Honkai: Star Rail (–ø—Ä–∞–π—Å)"),
    ("zzz_price", "üíé Zenless Zone Zero (–ø—Ä–∞–π—Å)"),
    ("roblox_price", "üíé Roblox (–ø—Ä–∞–π—Å)"),
    ("clash_price", "üíé Clash Of Clans (–ø—Ä–∞–π—Å)"),
    ("brawl_price", "üíé Brawl Stars (–ø—Ä–∞–π—Å)")
]

def get_platforms_keyboard():
    kb = InlineKeyboardMarkup()
    for callback, name in PLATFORMS:
        kb.add(InlineKeyboardButton(text=name, callback_data=callback))
    return kb

# FSM States
class SteamOrder(StatesGroup):
    waiting_for_login = State()
    waiting_for_amount = State()

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É—Å–ª—É–≥–∏:",
        reply_markup=get_platforms_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data in [p[0] for p in PLATFORMS])
async def platform_callback_handler(callback: CallbackQuery):
    if callback.data == "steam":
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω Steam:")
        await SteamOrder.waiting_for_login.set()
    else:
        await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {dict(PLATFORMS)[callback.data]}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑?", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{callback.data}")))
    await callback.answer()

@dp.message_handler(state=SteamOrder.waiting_for_login)
async def steam_login_handler(message: Message, state: FSMContext):
    login = message.text.strip()
    await state.update_data(login=login)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:")
    await SteamOrder.waiting_for_amount.set()

@dp.message_handler(state=SteamOrder.waiting_for_amount)
async def steam_amount_handler(message: Message, state: FSMContext):
    try:
        amount = float(message.text.strip().replace(',', '.'))
        commission = round(amount * 0.08, 2)
        total = round(amount + commission, 2)
        data = await state.get_data()
        login = data.get("login")
        await state.update_data(amount=amount, commission=commission, total=total)
        await message.answer(f"–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è (8%): {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_steam")))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö.")

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_"))
async def confirm_callback_handler(callback: CallbackQuery, state: FSMContext):
    platform = callback.data.replace("confirm_", "")
    if platform == "steam":
        data = await state.get_data()
        login = data.get("login")
        amount = data.get("amount")
        commission = data.get("commission")
        total = data.get("total")
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\nSteam\n–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è: {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '–ë–µ–∑ username'} ({callback.from_user.id})"
        await state.finish()
    else:
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {dict(PLATFORMS)[platform]}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '–ë–µ–∑ username'} ({callback.from_user.id})"
    await bot.send_message(MANAGER_CHAT_ID, text)
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
    await callback.answer()

@dp.message_handler()
async def fallback_handler(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –º–µ–Ω—é /start.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True) 
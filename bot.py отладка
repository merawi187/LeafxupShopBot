import os
import telebot
from telebot import types
from dotenv import load_dotenv
import threading
from flask import Flask
import time

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN')
MANAGER_CHAT_ID = int(os.getenv('MANAGER_CHAT_ID', '0'))

bot = telebot.TeleBot(BOT_TOKEN)

# –¢–æ–≤–∞—Ä—ã Genshin Impact
GENSHIN_ITEMS = [
    ("–ì–∏–º–Ω", 700),
    ("–•–æ—Ä", 1410),
    ("–•65", 70),
    ("–•300", 310),
    ("–•980", 980),
    ("–•1980", 1850),
    ("–•3280", 2900),
    ("–•6480", 5800),
    ("–ö–∞—Ä—Ç–æ—á–∫–∞", 310)
]

PLATFORMS = [
    ("genshin_price", "üíé Genshin Impact (–ø—Ä–∞–π—Å)"),
    ("genshin_locations", "üíé Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π)"),
    ("steam", "üëÅ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam"),
    ("hsr_price", "üåü Honkai: Star Rail (–ø—Ä–∞–π—Å)"),
    ("zzz_price", "üíé Zenless Zone Zero (–ø—Ä–∞–π—Å)"),
    ("roblox_price", "üíé Roblox (–ø—Ä–∞–π—Å)"),
    ("clash_price", "üíé Clash Of Clans (–ø—Ä–∞–π—Å)"),
    ("brawl_price", "üíé Brawl Stars (–ø—Ä–∞–π—Å)")
]

user_states = {}

PLATFORM_PHOTOS = {
    "genshin_price": ("genshin_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Genshin Impact"),
    "genshin_locations": ("genshin_locations.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Genshin Impact (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π)"),
    "steam": ("steam.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Steam"),
    "hsr_price": ("honkai_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Honkai: Star Rail"),
    "zzz_price": ("zzz_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Zenless Zone Zero"),
    "roblox_price": ("roblox_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Roblox"),
    "clash_price": ("coc_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Clash Of Clans"),
    "brawl_price": ("bs_price.jpg", "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Brawl Stars"),
}

PLATFORM_TEXTS = {
    "genshin_locations": "üíé –ó–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞—Ü–∏–π –≤ Genshin Impact\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
    "hsr_price": (
        "–•–æ–Ω–∫–∞–∏ –°—Ç–∞—Ä –†–µ–π–ª\n"
        "–°–ª–∞–≤–∞ –±–µ–∑—ã–º—è–Ω–Ω—ã—Ö - 800\n"
        "–ß–µ—Å—Ç—å –±–µ–∑—ã–º—è–Ω–Ω—ã—Ö - 1600\n"
        "–•300 - 350\n"
        "–•980 - 1380\n"
        "–•1980 - 2150\n"
        "–•3280 - 3510\n"
        "–•6480 - 7050\n"
        "–ö–∞–ª–µ–Ω–¥–∞—Ä—å - 350"
    ),
    "zzz_price": (
        "–ó–µ–Ω–ª–µ—Å –ó–æ–Ω–µ –ó–∏—Ä–æ\n"
        "–§–æ–Ω–¥ –†–∏–¥—É –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π - 810\n"
        "–§–æ–Ω–¥ –†–∏–¥—É –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π - 1610\n"
        "–•300 - 355\n"
        "–•980 - 1110\n"
        "–•1980 - 2180\n"
        "–•3280 - 3650\n"
        "–•6480 - 7100\n"
        "–ù–∞–±–æ—Ä - 355"
    ),
    "roblox_price": (
        "–†–æ–±–ª–æ–∫—Å\n"
        "–•500 - 470\n"
        "–•1000 - 910\n"
        "–•2000 - 1810\n"
        "–•5250 - 4400\n"
        "–•11000 - 8800\n"
        "–•24000 - 18000"
    ),
    "clash_price": (
        "–ö–ª–µ—à –†–æ—è–ª—å\n"
        "–ü–∞—Å—Å —Ä–æ—è–ª—å - 94\n"
        "–•500 - 395\n"
        "–•1200 - 795\n"
        "–•2500 - 1590\n"
        "–•6500 - 3985\n"
        "–•14000 - 7995\n"
        "–•80 - 75"
    ),
    "brawl_price": (
        "–ë—Ä–∞–≤–ª –°—Ç–∞—Ä—Å\n"
        "–ë—Ä–∞–≤–ª –ü–∞—Å—Å - 500\n"
        "–£–ª—É—á—à–µ–Ω–∏–µ –¥–æ –ø–ª—é—Å - 315\n"
        "–ë—Ä–∞–≤–ª –ü–∞—Å—Å –ø–ª—é—Å - 770\n"
        "–•30 - 155\n"
        "–•80 - 385\n"
        "–•170 - 780\n"
        "–•360 - 1580\n"
        "–•950 - 3900\n"
        "–•2000 - 7800"
    ),
}

PLATFORM_ITEMS = {
    "genshin_price": [
        ("–ì–∏–º–Ω", 700), ("–•–æ—Ä", 1410), ("–•65", 70), ("–•300", 310),
        ("–•980", 980), ("–•1980", 1850), ("–•3280", 2900), ("–•6480", 5800),
        ("–ö–∞—Ä—Ç–æ—á–∫–∞", 310)
    ],
    "genshin_locations": [
        ("üå™ –ú–æ–Ω–¥—à—Ç–∞–¥—Ç", "mondstadt"),
        ("ü™® –õ–∏ –Æ—ç", "liyue"),
        ("‚ö°Ô∏è –ò–Ω–∞–¥–∑—É–º–∞", "inazuma"),
        ("üåø –°—É–º–µ—Ä—É", "sumeru"),
        ("ü´µ –§–æ–Ω—Ç–µ–π–Ω", "fontaine"),
        ("üóø –ù–∞—Ç–ª–∞–Ω", "natlan"),
        ("‚ùï –î–æ–ø. —É—Å–ª—É–≥–∏", "other_services")
    ],
    "hsr_price": [
        ("–°–ª–∞–≤–∞ –±–µ–∑—ã–º—è–Ω–Ω—ã—Ö", 800), ("–ß–µ—Å—Ç—å –±–µ–∑—ã–º—è–Ω–Ω—ã—Ö", 1600),
        ("–•300", 350), ("–•980", 1380), ("–•1980", 2150),
        ("–•3280", 3510), ("–•6480", 7050), ("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", 350)
    ],
    "zzz_price": [
        ("–§–æ–Ω–¥ –†–∏–¥—É –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", 810), ("–§–æ–Ω–¥ –†–∏–¥—É –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π", 1610),
        ("–•300", 355), ("–•980", 1110), ("–•1980", 2180),
        ("–•3280", 3650), ("–•6480", 7100), ("–ù–∞–±–æ—Ä", 355)
    ],
    "roblox_price": [
        ("–•500", 470), ("–•1000", 910), ("–•2000", 1810),
        ("–•5250", 4400), ("–•11000", 8800), ("–•24000", 18000)
    ],
    "clash_price": [
        ("–ü–∞—Å—Å —Ä–æ—è–ª—å", 94), ("–•500", 395), ("–•1200", 795),
        ("–•2500", 1590), ("–•6500", 3985), ("–•14000", 7995), ("–•80", 75)
    ],
    "brawl_price": [
        ("–ë—Ä–∞–≤–ª –ü–∞—Å—Å", 500), ("–£–ª—É—á—à–µ–Ω–∏–µ –¥–æ –ø–ª—é—Å", 315),
        ("–ë—Ä–∞–≤–ª –ü–∞—Å—Å –ø–ª—é—Å", 770), ("–•30", 155), ("–•80", 385),
        ("–•170", 780), ("–•360", 1580), ("–•950", 3900), ("–•2000", 7800)
    ]
}

LOCATION_ITEMS = {
    "mondstadt": [
        ("–ú–æ–Ω–¥—à—Ç–∞–¥—Ç (100%)", 850),
        ("–î—Ä–∞–∫–æ–Ω–∏–π —Ö—Ä–µ–±–µ—Ç (100%)", 700),
        ("–ú–æ–Ω–¥—à—Ç–∞–¥—Ç + –î—Ä–∞–∫–æ–Ω–∏–π —Ö—Ä–µ–±–µ—Ç (100%)", 1300)
    ],
    "liyue": [
        ("–õ–∏ –Æ—ç (100%)", 2300),
        ("–†–∞–∑–ª–æ–º (100%)", 1000),
        ("–õ–∏ –Æ—ç + –†–∞–∑–ª–æ–º (100%)", 3300),
        ("–î–æ–ª–∏–Ω–∞ –ß—ç–Ω—å—é–π (100%)", 2200)
    ],
    "inazuma": [
        ("–ò–Ω–∞–¥–∑—É–º–∞ (100%)", 2000),
        ("–≠–Ω–∫–∞–Ω–æ–º–∏—è (100%)", 1200),
        ("–ò–Ω–∞–¥–∑—É–º–∞ + –≠–Ω–∫–∞–Ω–æ–º–∏—è (100%)", 3200)
    ],
    "sumeru": [
        ("–°—É–º–µ—Ä—É (100%)", 2200),
        ("–ü—É—Å—Ç—ã–Ω—è –ö–æ–ª–æ–Ω–Ω–∞–¥ (100%)", 1350),
        ("–ü—É—Å—Ç—ã–Ω—è –•–∞–¥—Ä–∞–º–∞–≤–µ—Ç (100%)", 1800),
        ("–¶–∞—Ä—Å—Ç–≤–æ –§–∞—Ä–∞–∫—Ö–µ—Ä—Ç (100%)", 1200),
        ("–í—Å–µ –ø—É—Å—Ç—ã–Ω–∏ –°—É–º–µ—Ä—É (100%)", 4350),
        ("–°—É–º–µ—Ä—É (—Ç—Ä–æ–ø–∏–∫–∏ + –ø—É—Å—Ç—ã–Ω—è) (100%)", 6500)
    ],
    "fontaine": [
        ("–ö—É—Ä –î–µ –§–æ–Ω—Ç–µ–π–Ω (100%)", 1800),
        ("–ò–Ω—Å—Ç–∏—Ç—É—Ç –§–æ–Ω—Ç–µ–π–Ω–∞ (100%)", 1700),
        ("–õ–µ—Å –≠—Ä–∏–Ω–∏–π (100%)", 2100),
        ("–î—Ä–µ–≤–Ω–µ–µ –ú–æ—Ä–µ (100%)", 1300),
        ("–í–µ—Å—å –§–æ–Ω—Ç–µ–π–Ω (100%)", 6400)
    ],
    "natlan": [
        ("–ù–∞—Ç–ª–∞–Ω 5.0 (100%)", 3000),
        ("–û—á–∫–∞–Ω–∞—Ç–ª–∞–Ω (100%)", 1800),
        ("–ù–∞—Ç–ª–∞–Ω 5.5 (100%)", 2250)
    ],
    "other_services": [
        ("–ö–≤–µ—Å—Ç –ê—Ä–∞–Ω–∞—Ä", 1800),
        ("–£—Ö–æ–¥ –∑–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–º (–º–µ—Å—è—Ü)", 3000)
    ]
}

def get_platforms_keyboard():
    kb = types.InlineKeyboardMarkup()
    for callback, name in PLATFORMS:
        kb.add(types.InlineKeyboardButton(text=name, callback_data=callback))
    return kb

def get_items_keyboard(platform):
    kb = types.InlineKeyboardMarkup()
    items = PLATFORM_ITEMS.get(platform, [])
    
    for name, value in items:
        if isinstance(value, int):
            callback_data = f"item|||{platform}|||{name}"
            kb.add(types.InlineKeyboardButton(text=f"{name} ({value}‚ÇΩ)", callback_data=callback_data))
        else:
            callback_data = f"genshin_loc|||{value}"
            kb.add(types.InlineKeyboardButton(text=name, callback_data=callback_data))
    
    if platform != "genshin_locations":
        kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_platforms"))
    
    return kb

def get_locations_keyboard(region=None):
    kb = types.InlineKeyboardMarkup(row_width=2)
    
    if region is None:
        for name, callback in PLATFORM_ITEMS["genshin_locations"]:
            kb.add(types.InlineKeyboardButton(text=name, callback_data=f"genshin_loc|||{callback}"))
    else:
        items = LOCATION_ITEMS.get(region, [])
        for name, price in items:
            callback_data = f"item|||genshin_locations|||{name}"
            kb.add(types.InlineKeyboardButton(text=f"{name} - {price}‚ÇΩ", callback_data=callback_data))
        
        kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏–æ–Ω–∞–º", callback_data="genshin_locations"))
    
    return kb

def get_region_by_name(name):
    for region, items in LOCATION_ITEMS.items():
        for item_name, _ in items:
            if item_name == name:
                return region
    return None

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_states.pop(message.from_user.id, None)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É—Å–ª—É–≥–∏:", reply_markup=get_platforms_keyboard())

@bot.callback_query_handler(func=lambda call: call.data in PLATFORM_PHOTOS)
def platform_handler(call):
    platform = call.data
    
    if platform == "genshin_locations":
        bot.send_message(call.message.chat.id, PLATFORM_TEXTS["genshin_locations"], 
                         reply_markup=get_locations_keyboard())
        bot.answer_callback_query(call.id)
        return
    
    photo_info = PLATFORM_PHOTOS.get(platform)
    if photo_info:
        filename, caption = photo_info
        try:
            with open(filename, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo, caption=caption)
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∞–π—Å–∞ –¥–ª—è {caption}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    
    if platform == "steam":
        user_states[call.from_user.id] = {"state": "awaiting_steam_login"}
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω Steam:")
    else:
        platform_name = dict(PLATFORMS)[platform]
        time.sleep(0.5)
        bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é {platform_name}:", 
                         reply_markup=get_items_keyboard(platform))
    
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("genshin_loc|||"))
def genshin_location_handler(call):
    try:
        region = call.data.split("|||")[1]
        region_name = {
            "mondstadt": "üå™ –ú–æ–Ω–¥—à—Ç–∞–¥—Ç",
            "liyue": "ü™® –õ–∏ –Æ—ç",
            "inazuma": "‚ö°Ô∏è –ò–Ω–∞–¥–∑—É–º–∞",
            "sumeru": "üåø –°—É–º–µ—Ä—É",
            "fontaine": "ü´µ –§–æ–Ω—Ç–µ–π–Ω",
            "natlan": "üóø –ù–∞—Ç–ª–∞–Ω",
            "other_services": "‚ùï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"
        }.get(region, region.capitalize())
        
        if region in LOCATION_ITEMS:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"üíé {region_name} - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:",
                reply_markup=get_locations_keyboard(region)
            )
        else:
            bot.answer_callback_query(call.id, "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"Error in genshin_location_handler: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.callback_query_handler(func=lambda call: call.data == "genshin_locations")
def back_to_locations_handler(call):
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=PLATFORM_TEXTS["genshin_locations"],
            reply_markup=get_locations_keyboard()
        )
    except Exception as e:
        print(f"Error in back_to_locations_handler: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_platforms")
def back_to_platforms_handler(call):
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É—Å–ª—É–≥–∏:",
            reply_markup=get_platforms_keyboard()
        )
    except Exception as e:
        print(f"Error in back_to_platforms_handler: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("item|||"))
def item_selected_handler(call):
    try:
        parts = call.data.split("|||")
        if len(parts) != 3:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞")
            return
            
        platform = parts[1]
        name = parts[2]
        
        price = None
        if platform == "genshin_locations":
            for region in LOCATION_ITEMS.values():
                for n, p in region:
                    if n == name:
                        price = p
                        break
        else:
            for n, p in PLATFORM_ITEMS.get(platform, []):
                if n == name:
                    price = p
                    break
        
        if price is not None:
            kb = types.InlineKeyboardMarkup()
            confirm_callback = f"confirm|||{platform}|||{name}"
            kb.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=confirm_callback))
            
            if platform == "genshin_locations":
                region = get_region_by_name(name)
                if region:
                    kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"genshin_loc|||{region}"))
            else:
                kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=platform))
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {name} ({price}‚ÇΩ)\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
                reply_markup=kb
            )
        else:
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"Error in item_selected_handler: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm|||"))
def confirm_order_handler(call):
    try:
        parts = call.data.split("|||")
        if len(parts) != 3:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return
            
        platform = parts[1]
        name = parts[2]
        
        price = None
        if platform == "genshin_locations":
            for region in LOCATION_ITEMS.values():
                for n, p in region:
                    if n == name:
                        price = p
                        break
        else:
            for n, p in PLATFORM_ITEMS.get(platform, []):
                if n == name:
                    price = p
                    break
        
        username = call.from_user.username or '–ë–µ–∑ username'
        platform_name = dict(PLATFORMS).get(platform, platform)
        
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform_name}\n–ü–æ–∑–∏—Ü–∏—è: {name} ({price}‚ÇΩ)\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({call.from_user.id})"
        bot.send_message(MANAGER_CHAT_ID, text)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n{name} ({price}‚ÇΩ)\n\n–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã."
        )
        
    except Exception as e:
        print(f"Error in confirm_order_handler: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_steam_login")
def steam_login_handler(message):
    login = message.text.strip()
    user_states[message.from_user.id] = {"state": "awaiting_steam_amount", "login": login}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 100 –¥–æ 25000):")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_steam_amount")
def steam_amount_handler(message):
    try:
        amount = float(message.text.strip().replace(',', '.'))
        if amount < 100 or amount > 25000:
            bot.send_message(message.chat.id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100 –¥–æ 25000 —Ä—É–±–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        commission = round(amount * 0.08, 2)
        total = round(amount + commission, 2)
        login = user_states[message.from_user.id]["login"]
        user_states[message.from_user.id] = {
            "state": "confirm_steam",
            "login": login,
            "amount": amount,
            "commission": commission,
            "total": total
        }
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_steam"))
        kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="steam"))
        bot.send_message(message.chat.id, 
                        f"–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è (8%): {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?",
                        reply_markup=kb)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö.")

@bot.callback_query_handler(func=lambda call: call.data == "confirm_steam")
def confirm_steam_handler(call):
    try:
        data = user_states.get(call.from_user.id, {})
        login = data.get("login")
        amount = data.get("amount")
        commission = data.get("commission")
        total = data.get("total")
        username = call.from_user.username or '–ë–µ–∑ username'
        
        text = f"[–ù–û–í–´–ô –ó–ê–ö–ê–ó]\nSteam\n–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞: {amount}‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è: {commission}‚ÇΩ\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({call.from_user.id})"
        bot.send_message(MANAGER_CHAT_ID, text)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n–õ–æ–≥–∏–Ω: {login}\n–°—É–º–º–∞: {amount}‚ÇΩ\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã."
        )
        user_states.pop(call.from_user.id, None)
    except Exception as e:
        print(f"Error in confirm_steam_handler: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@bot.message_handler(func=lambda message: True)
def fallback_handler(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –º–µ–Ω—é /start.")

def run_flask():
    app = Flask(__name__)

    @app.route('/')
    def index():
        return "OK"

    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    bot.polling(none_stop=True)
